name: CI/CD Pipeline to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Authenticate to AWS ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 528757809157.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker Image for x86_64
        run: docker build --platform linux/amd64 -t fitness-tracker-app .

      - name: Tag Docker Image
        run: docker tag fitness-tracker-app:latest 528757809157.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fitness-tracker:latest

      - name: Push Docker Image to ECR
        run: docker push 528757809157.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fitness-tracker:latest

  deploy:
    name: Deploy to AWS EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Debug GitHub Secrets
        run: |
          echo "Checking if EC2_SSH_KEY is available..."
          if [ -z "$EC2_SSH_KEY" ]; then
            echo "❌ EC2_SSH_KEY is EMPTY or NOT FOUND!"
          else
            echo "✅ EC2_SSH_KEY is present, length: ${#EC2_SSH_KEY}"
            echo "First 10 characters: ${EC2_SSH_KEY:0:10}"
          fi
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

      - name: Debug SSH Connection
        run: |
          echo "Checking EC2 connectivity..."
          nc -zv ${{ secrets.EC2_HOST }} 22 || echo "❌ SSH is not accessible"

      - name: SSH into EC2 and Deploy Container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key:  ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Pulling latest image from ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 528757809157.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker pull 528757809157.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fitness-tracker:latest
            docker stop fitness-tracker-container || true
            docker rm fitness-tracker-container || true
            docker run -d --name fitness-tracker-container --network bridge -p 8080:8080 528757809157.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fitness-tracker:latest
  deploy-frontend:
    name: Deploy Frontend to AWS EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install
        working-directory: ./fitness-tracker-frontend  # Adjust path if needed

      - name: Build Frontend
        run: npm run build
        working-directory: ./fitness-tracker-frontend

      - name: Copy Frontend Build to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./fitness-tracker-frontend/dist/*"
          target: "/var/www/fitness-tracker"

      - name: SSH into EC2 and Configure Nginx
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo yum install -y nginx
            sudo systemctl enable nginx
            sudo systemctl restart nginx

            echo 'Configuring Nginx...'
            sudo tee /etc/nginx/conf.d/fitness-tracker.conf > /dev/null <<EOL
            server {
                listen 80;
                server_name ${EC2_HOST};

                location / {
                    root /var/www/fitness-tracker;
                    index index.html;
                    try_files \$uri /index.html;
                }

                location /api/ {
                    proxy_pass http://localhost:8080/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                }
            }
            EOL

            sudo nginx -t && sudo systemctl restart nginx
        
